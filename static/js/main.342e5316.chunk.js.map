{"version":3,"sources":["Navbar.js","taskReducer.js","Addtask.js","Todoitem.js","Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","taskobject","useSelector","store","style","backgroundColor","borderRadius","className","taskitems","length","initialData","taskReducer","state","action","type","payload","filter","task","map","oldtask","newtask","Addtask","useState","taskname","settaskname","dispatch","useDispatch","onfocus","value","placeholder","onChange","e","target","onClick","console","log","Todoitem","show","setshow","setnewtask","deletetask","display","finaledit","Todolist","App","createStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.342e5316.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport default function Navbar() {\r\n    const taskobject = useSelector(store => store)\r\n    return (\r\n        <div style={{ backgroundColor: '#8FBC8F', borderRadius: '10px' }} className='m-5'>\r\n            <h1>Todo List </h1>\r\n            <h3>Tasks left to do: {taskobject.taskitems.length}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","\r\n//filter accepts the object name as parameter (task)\r\n//return the tasklist by removing the payload (the data from the todolist component)\r\n//task!=action.payload tells compiler dont include if task is equal to one recieved from todolist when you show the remaining tasks (when delete called) \r\n//need to write function for edit task \r\nconst initialData = {\r\n\r\n    taskitems: []\r\n}\r\n\r\nfunction taskReducer(state = initialData, action) {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'ADD_TASK': return {\r\n\r\n            ...state,  //this function should not effect any other variables \r\n            taskitems: [...state.taskitems, action.payload]  // update the array add action.payload(new taskname) to taskitems array\r\n        }\r\n        case 'DELETE_TASK': return {\r\n\r\n            ...state,\r\n            taskitems: state.taskitems.filter((task) => task != action.payload)\r\n        }\r\n        case 'EDIT_TASK': return {\r\n\r\n            ...state,\r\n            taskitems: state.taskitems.map((task) => {  //look through map till find old task variable\r\n\r\n                if (task == action.payload.oldtask) { //if task is equal to old task update it with new task\r\n                    task = action.payload.newtask\r\n\r\n                    return task\r\n                }\r\n\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return state\r\n}\r\n\r\nexport default taskReducer","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function Addtask() {\r\n\r\n    const [taskname, settaskname] = useState('')\r\n\r\n    const taskobject = useSelector(store => store)\r\n\r\n    const dispatch = useDispatch()  //object created for dispatch \r\n\r\n    function addtask() {\r\n\r\n\r\n        dispatch({ type: 'ADD_TASK', payload: taskname })\r\n        console.log(taskobject.taskitems)\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='Container'>\r\n\r\n\r\n            <div className=\"row justify-content-center\">\r\n\r\n                <div className=\"col-md-6 p-3\" style={{ backgroundColor: '#8FBC8F', borderRadius: '10px' }}>\r\n                    <h3>Add a task here</h3>\r\n                    <div className='input-group'>\r\n                        <input type=\"text\" className='form-control' onfocus=\"this.value=''\" value={taskname} placeholder=\"Task Names\" onChange={(e) => { settaskname(e.target.value) }} />\r\n                        <span className='input-group-btn'>\r\n\r\n                            <button className='btn btn-success m-1' onClick={addtask}>Add Task</button>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","//need to add task as props to function todoitem\r\n//write task in h1 return\r\n//onclick for delete button (goto deletetask function)\r\n//to delete have to call the delete task function in the taskreducer with a parameter of task by sending the task name as payload (data)\r\n// delete task function will check the task name in task items array when matching index in array it will be deleted\r\n//need to import useDispatch so can use function that is present in in taskReducer\r\n//need to write functin in taskreducer before can call it \r\n\r\nimport { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\n\r\nexport default function Todoitem({ task }) {\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [show, setshow] = useState('none')\r\n\r\n    const [newtask, setnewtask] = useState('')\r\n\r\n    function deletetask(task) {\r\n\r\n        dispatch({ type: 'DELETE_TASK', payload: task })\r\n\r\n    }\r\n\r\n    function edittask() {\r\n\r\n        setshow('inline')\r\n\r\n    }\r\n\r\n    function finaledit(task) {\r\n\r\n        dispatch({ type: 'EDIT_TASK', payload: { oldtask: task, newtask: newtask } })\r\n        setshow('none')\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row justify content left\">\r\n\r\n                <div className=\"col-md-9\">\r\n                    <h2>{task}</h2>\r\n                </div>\r\n                <div className=\"col-md-1\">\r\n                    <button className='btn btn-secondary btn-sm m-1 ' onClick={edittask}>Edit</button>\r\n                </div>\r\n                <div className=\"col-md-1\">\r\n                    <button className='btn btn-danger btn-sm m-1 ' onClick={() => deletetask(task)}>Delete</button>\r\n\r\n                </div>\r\n                <input type=\"text\" style={{ display: show }} value={newtask} onChange={(e) => { setnewtask(e.target.value) }} />\r\n                <button style={{ display: show }} className='btn btn-success m-1' onClick={() => { finaledit(task) }}>Final Edit</button>\r\n                <hr />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","//get data from  reducer and map thorough all task items in array and show in page\r\n//need to import useSelector to get data from taskReducer.js\r\n//need to create an object for useSelector to get data (taskobject)\r\n// need to create an object to access the array called taskitems \r\n//use map to look through the array elements and return the HTML content\r\n//the object name is task\r\n//for every task in the task list we have to return one conpmonent todoitem.js <Todoitem/>\r\n//need to pass task as data as going to put all data into the Todoitem component\r\n//need to add taskitems in the div so every task item will be added in the next line as we iterate through the taskitem with map\r\n//need to add todolist component in App.js\r\n\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Todoitem from './Todoitem'\r\n\r\nexport default function Todolist() {\r\n\r\n    const taskobject = useSelector(store => store)\r\n\r\n    const taskitems = taskobject.taskitems.map((task) => {\r\n\r\n        return (\r\n            <Todoitem task={task} />\r\n        )\r\n\r\n    })\r\n\r\n    return (\r\n        <div className='row justify-content-center mt-5'>\r\n            <div className=\"col-md-10 \" style={{ backgroundColor: '#8FBC8F', borderRadius: '10px' }}>\r\n                {taskitems}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './Navbar';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport taskReducer from './taskReducer';\nimport bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport Addtask from './Addtask';\nimport Todolist from './Todolist';\n\n\n\n\nfunction App() {\n\n  const store = createStore(taskReducer)\n\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Navbar />\n        <Addtask />\n        <Todolist />\n      </Provider>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}